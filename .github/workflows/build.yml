name: build

on:
  push:
    paths-ignore:
    - '**/README.md'
  pull_request:
    paths-ignore:
    - '**/README.md'
    
jobs:

  build-linux-platforms:
    runs-on: ubuntu-16.04
    strategy:
        matrix:
          cfg:
          - {target: linux64, libs: 64gcc4}
          - {target: linuxarmv6l, libs: armv6l}
          - {target: linuxarmv7l, libs: armv7l}
    env:
     TARGET: ${{matrix.cfg.target}}
    steps:
    - uses: actions/checkout@v2
    - name: Download libs
      run: ./scripts/linux/download_libs.sh -a ${{matrix.cfg.libs}};
    - name: Install dependencies
      run: ./scripts/ci/$TARGET/install.sh;
    - name: Install gcc4
      run: if [ ${{matrix.cfg.target}} = "64gcc4" ]; then
                sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;
                sudo apt-get update -q;
                sudo apt-get install gcc-4.9 g++-4.9;
            fi
    - name: Build
      run: if [ "$TARGET" = "linux64" ]; then
            scripts/ci/$TARGET/build.sh
            scripts/ci/$TARGET/run_tests.sh;
           else
            scripts/ci/$TARGET/build.sh;
           fi
    - name: Upload Libs
      run: scripts/ci/upload_of_lib.sh;
      env:
        GA_CI_SECRET: ${{ secrets.CI_SECRET }}
    
  build-emscripten:
    runs-on: ubuntu-16.04
    strategy:
        matrix:
          cfg:
          - {target: emscripten}
    env:
     TARGET: ${{matrix.cfg.target}}
    steps:
    - uses: actions/checkout@v2
    - name: Docker Step
      run:  "docker run -di --name emscripten -v $PWD:/src trzeci/emscripten:sdk-incoming-64bit bash"
    - name: Download libs
      run: ./scripts/$TARGET/download_libs.sh
    - name: Install dependencies
      run: ./scripts/ci/$TARGET/install.sh
    - name: Build
      run: docker exec -i emscripten sh -c "scripts/ci/$TARGET/build.sh";
    - name: Upload Libs
      run: scripts/ci/upload_of_lib.sh;
      env:
          GA_CI_SECRET: ${{ secrets.CI_SECRET }}

  build-android:
    runs-on: ubuntu-16.04
    strategy:
      matrix:
        cfg:
        - {target: android, gradle_target: compileArm7DebugSources}
        - {target: android, gradle_target: compileX86DebugSources}

    env:
      TARGET: ${{matrix.cfg.target}}
      GRADLE_TARGET: ${{matrix.cfg.gradle_target}}
      NDK_DIR: android-ndk-r15c
    steps:
    - uses: actions/checkout@v2
    - name: Cache projectGenerator folder
      uses: actions/cache@v2
      with:
        path: '~/projectGenerator'
        key: ${{ runner.os }}-projectGenerator-${{matrix.cfg.gradle_target}}
    - name: install
      run: ./scripts/ci/$TARGET/install.sh
    - name: Download libs
      run: ./scripts/$TARGET/download_libs.sh
    - name: Build
      run: ./scripts/ci/$TARGET/build.sh
    - name: Upload Libs
      run: scripts/ci/upload_of_lib.sh;
      env:
        GA_CI_SECRET: ${{ secrets.CI_SECRET }}

  build-osx:
    runs-on: macos-10.15
    strategy:
        matrix:
          cfg:
          - {target: osx, opt: ""}
          - {target: osx, opt: "makefiles"}
    env:
     TARGET: ${{matrix.cfg.target}}
     OPT: ${{matrix.cfg.opt}}
    steps:
    - uses: actions/checkout@v2
    - name: Download libs
      run: ./scripts/$TARGET/download_libs.sh
    - name: rm-dev
      run: sudo rm -rf /Library/Developer
    - name: install
      run: ./scripts/ci/$TARGET/install.sh
    - name: Build
      run:
           if [ "$TARGET" = "osx" ] && [ "$OPT" = "makefiles" ]; then
            scripts/ci/$TARGET/run_tests.sh;
           else
            scripts/ci/$TARGET/build.sh $OPT;
           fi
      env:
        DEVELOPER_DIR: "/Applications/Xcode_12.2.app/Contents/Developer"
        SDKROOT: "/Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
    - name: Upload Libs
      run: scripts/ci/upload_of_lib.sh;
      env:
        GA_CI_SECRET: ${{ secrets.CI_SECRET }}
